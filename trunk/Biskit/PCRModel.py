## PCRModel:
##
## Biskit, a toolkit for the manipulation of macromolecular structures
## Copyright (C) 2004-2005 Raik Gruenberg & Johan Leckner; All rights reserved
##
## collect and manage information about a ligand or receptor conformation
## generated by (PCR)MD
##
## $Revision$
## last $Author$
## last $Date$

import os.path

import tools as t
from PDBModel import PDBModel


class PCRModel( PDBModel ):
    """
    PDBModel with attached Xplor topology (PSF).
    Creates more problems than it solves...
    """

    def __init__(self, fPsf=None, source=None, pdbCode=None, **params):
        """
        fPsf    - str, file name of psf
        source  - str | PDBModel, file name of pdb OR PDBModel instance
        pdbCode - str, if None, first 4 letters of filename will be used
        """
        PDBModel.__init__( self, source=source, pdbCode=pdbCode, **params )

        if fPsf: fPsf = t.absfile( fPsf )

        ## in case given fPDB is already a PCRModel, keep psfFileName
        self.psfFileName = fPsf or getattr( source, 'psfFileName', None)

        ## version as of creation of this object
        self.initVersion = self.version()

    def version( self ):
        return PDBModel.version(self) + '; PCRModel $Revision$'

    def getPsfFile(self):
        """-> string"""
        return self.psfFileName

    def take(self, i, deepcopy=0 ):
        r = PDBModel.take( self, i, deepcopy )
        r.psfFileName = self.psfFileName
        r.initVersion = self.initVersion
        return r


    def concat(self, *models ):
        r = PDBModel.concat( self, *models )
        r.psfFileName = self.psfFileName
        r.initVersion = self.initVersion
        return r

###############
## Testing

if __name__ == '__main__':

    from Biskit import *
    
    m = PCRModel( t.testRoot() + "/com_wet/1BGS.psf",
                  t.testRoot() + "/com_wet/1BGS.pdb" )
    print m.sequence()
    print m.resMap()


